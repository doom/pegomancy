@verbatim %{
    from functools import reduce

    class JSONRuleHandler:
        def boolean(self, node):
            return True if node == 'true' else False

        def integer(self, node):
            return int(node)

        def string(self, node):
            return node[1]

        def float(self, node):
            return float(node)

        def list(self, node):
            values = node["values"]
            if isinstance(values, list):
                if len(values) == 1:
                    return values
                return [values[0]] + [v["value"] for v in values[1]]
            return []

        def field(self, node):
            return {node["key"]: node["value"]}

        def object(self, node):
            fields = node["fields"]
            if isinstance(fields, list):
                if len(fields) == 1:
                    return fields[0]
                return reduce(lambda acc, new: {**acc, **new["field"]}, fields[1], fields[0])
            return {}
%}

null: 'null'

boolean: 'true' | 'false'

integer: r"[0-9]+"

string: '"' r'[^"]*' '"'

float: r"[0-9]+\.[0-9]+"

field: key:string ':' value:value
repeated_field: ',' field:field
object_fields: field repeated_field*
object: '{' fields:object_fields? '}'

repeated_value: ',' value:value
list_values: value repeated_value*
list: '[' values:list_values? ']'

value: null
     | boolean
     | float
     | integer
     | string
     | list
     | object
